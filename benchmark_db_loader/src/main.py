from .benchmark_runner import run_benchmark
from .di_container import DIContainer
from .utils.wait_for_db import wait_for_all_databases
from .utils.results_saver import ResultsSaver
from .utils.plot_generator import PlotGenerator
from .logging_config import setup_logger

logger = setup_logger(__name__)


def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –±–µ–Ω—á–º–∞—Ä–∫–∞:
    1. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î
    2. –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞
    3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    4. –ü–æ–∫–∞–∑ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    logger.info("Starting database load benchmark...")

    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ë–î
    if not wait_for_all_databases(max_attempts=30, delay=2):
        logger.error("Not all databases are ready. Exiting...")
        return

    container = DIContainer()
    results = run_benchmark(container, save_results=True, generate_plots=True)

    logger.info("üìä Benchmark Results:")
    for db, time_taken in results.items():
        status = "SUCCESS" if time_taken != float('inf') else "FAILED"
        logger.info(f"  {db}: {time_taken:.2f} seconds ({status})")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ñ–∞–π–ª–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    try:
        saver = ResultsSaver()
        latest_file = saver.get_latest_results_file()
        if latest_file:
            logger.info(f"Latest results saved to: {latest_file}")

        plot_generator = PlotGenerator()
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        logger.info("Performance plots have been generated in the 'plots' directory")

    except Exception as e:
        logger.error(f"Could not retrieve latest files: {e}")


if __name__ == "__main__":
    main()