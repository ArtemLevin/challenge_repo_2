services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: user-action-collector:latest
    container_name: ugc-app_v_1
    ports:
      - "8000:5000"
    env_file:
      - .env
    environment:
      PYTHONPATH: /app_v_1
    depends_on:
      message-broker:
        condition: service_started
      cache:
        condition: service_started
      dlq-cache:
        condition: service_started
      tracing:
        condition: service_started
    restart: unless-stopped
    networks:
      - internal-network
    volumes:
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
      - ./logs:/app_v_1/logs
    command: >
      sh -c '
      chmod +x /usr/local/bin/wait-for-it.sh &&
      wait-for-it.sh cache:6379 -t 60 -- \
      wait-for-it.sh message-broker:9092 -t 60 -- \
      wait-for-it.sh tracing:14268 -t 30 -- \
      gunicorn -b 0.0.0.0:5000 --worker-class uvicorn.workers.UvicornWorker app.main:app
      '
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  message-broker:
    image: bitnami/kafka:latest
    container_name: kafka-broker
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://message-broker:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_PROCESS_ROLES=broker
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - internal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "echo 'stats' | nc message-broker 9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  cache:
    image: redis:latest
    container_name: redis-main
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    networks:
      - internal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  dlq-cache:
    image: redis:latest
    container_name: redis-dlq
    ports:
      - "6380:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_dlq_data:/data
    networks:
      - internal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  tracing:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "14268:14268"
      - "16686:16686"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - internal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  internal-network:
    driver: bridge

volumes:
  kafka_data:
  redis_data:
  redis_dlq_data: